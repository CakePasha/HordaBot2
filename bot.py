import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F  # type: ignore
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, Update  # type: ignore
from aiogram.filters import Command  # type: ignore
from aiogram.fsm.storage.memory import MemoryStorage  # type: ignore
import asyncio
from datetime import datetime

from dotenv import load_dotenv  # type: ignore
import os

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# Ensure the 'level' column exists
try:
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]
    print(columns)
except sqlite3.OperationalError as e:
    logging.error(f"Error ensuring 'level' column exists: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É coins, rewards –∏ level, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
try:
    cursor.execute("ALTER TABLE users ADD COLUMN coins INTEGER DEFAULT 0")
    cursor.execute("ALTER TABLE users ADD COLUMN rewards TEXT DEFAULT ''")
    cursor.execute("ALTER TABLE users ADD COLUMN level INTEGER DEFAULT 1")
    conn.commit()
except sqlite3.OperationalError:
    pass  # –ö–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É first_name, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    cursor.execute("ALTER TABLE users ADD COLUMN first_name TEXT")
    conn.commit()
except sqlite3.OperationalError:
    pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        referrer_id INTEGER,
        referrals_count INTEGER DEFAULT 0,
        discount REAL DEFAULT 0.0,
        coins INTEGER DEFAULT 0,
        rewards TEXT DEFAULT '',
        level INTEGER DEFAULT 1
    )
""")
conn.commit()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É purchases, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute("""
    CREATE TABLE IF NOT EXISTS purchases (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        referrer_id INTEGER,
        amount INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
last_command_time = {}

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS = {
    "discord_nitro_1m": {"name": "Discord Nitro (1 Month)", "price": 400},
    "spotify_premium_1m": {"name": "Spotify Premium (1 Month)", "price": 200},
    "twitch_level1_1m": {"name": "Twitch Level 1 (1 Month)", "price": 200},
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥
async def throttle_command(user_id: int, command: str, rate: int = 2):
    now = datetime.now()
    if user_id in last_command_time:
        last_time = last_command_time[user_id].get(command)
        if last_time and (now - last_time).total_seconds() < rate:
            return False
    last_command_time.setdefault(user_id, {})[command] = now
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def add_user(user_id, username, referrer_id=None, first_name=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "INSERT INTO users (user_id, username, first_name, referrer_id) VALUES (?, ?, ?, ?)",
        (user_id, username, first_name, referrer_id)
    )
    conn.commit()
    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Ä–µ—Ñ–µ—Ä–µ—Ä: {referrer_id}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if referrer_id:
        logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {referrer_id}")
        update_referrals_count(referrer_id)
        update_discount_and_notify(referrer_id)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
def update_referrals_count(user_id):
    cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
def update_discount_and_notify(user_id):
    cursor.execute("SELECT referrals_count FROM users WHERE user_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    discount = min(referrals_count * 2, 50)  # 2% –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –º–∞–∫—Å–∏–º—É–º 50%
    cursor.execute("UPDATE users SET discount = ? WHERE user_id = ?", (discount, user_id))
    conn.commit()
    logging.info(f"–°–∫–∏–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {discount}%")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    asyncio.create_task(bot.send_message(
        user_id,
        f"üéâ *You have +1 new referral!*\n"
        f"*Your discount has been increased by 2%.*\n"
        f"*Current discount: {discount}%.*",
        parse_mode="Markdown"
    ))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ My Profile"), KeyboardButton(text="üõí Catalog")],
            [KeyboardButton(text="üéÅ Gift Shop"), KeyboardButton(text="üéÅ Referral System")],
            [KeyboardButton(text="‚ÑπÔ∏è About Us"), KeyboardButton(text="üí¨ Help & Support")],
            [KeyboardButton(text="‚ùì About Levels")]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )
    return keyboard

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id == ADMIN_ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_coins(user_id):
    cursor.execute("SELECT coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_reward(user_id, reward):
    cursor.execute("SELECT rewards FROM users WHERE user_id = ?", (user_id,))
    current_rewards = cursor.fetchone()[0]
    updated_rewards = current_rewards + f"{reward}, " if current_rewards else f"{reward}, "
    cursor.execute("UPDATE users SET rewards = ? WHERE user_id = ?", (updated_rewards, user_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def add_coins(user_id, coins_to_add):
    cursor.execute("SELECT coins FROM users WHERE user_id = ?", (user_id,))
    current_coins = cursor.fetchone()[0]
    new_coins = current_coins + coins_to_add
    cursor.execute("UPDATE users SET coins = ? WHERE user_id = ?", (new_coins, user_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_level(user_id):
    cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
    current_level = cursor.fetchone()[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–µ—Ä—à–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª
    cursor.execute("SELECT COUNT(*) FROM purchases WHERE user_id = ? OR referrer_id = ?", (user_id, user_id))
    purchase_count = cursor.fetchone()[0]

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ 2
    if purchase_count > 0 and current_level < 2:
        cursor.execute("UPDATE users SET level = 2 WHERE user_id = ?", (user_id,))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        asyncio.create_task(bot.send_message(
            user_id,
            "üéâ *Congratulations!*\n"
            "Your level has been upgraded to *Level 2*!\n\n"
            "üîπ *New benefits:*\n"
            "‚Ä¢ You can now purchase all gifts in the Gift Shop.\n"
            "‚Ä¢ You earn *30 coins* for each referral instead of 25.\n",
            parse_mode="Markdown"
        ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referrer_id = None

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not await throttle_command(user_id, "start", rate=2):
        await message.answer("‚è≥ Please wait before using this command again.")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /start –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split()[1])
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referrer_id}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(user_id, username, referrer_id, first_name)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    photo_url = "https://i.imgur.com/lnr4Z0M.jpeg" 
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=(
            f"Hello, *{first_name}*! \nWelcome to *Horda Shop*! üéâ\n\n"
            "*üí´ Tap the menu below to snoop around.*\n"
            "*Deals don‚Äôt bite, but they do disappearü´• ‚Äî so don‚Äôt blink...*\n\n\n"
            "*ü™¥Our News Channel:* [@HORDAHORDA]\n"
            "*Reviews:* [@hordareviews]"
        ),
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ My Profile"
@dp.message(F.text == "üë§ My Profile")
async def handle_profile(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT referrals_count, discount, coins, rewards, level FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        referrals_count, discount, coins, rewards, level = result
        rewards_list = rewards if rewards else "No rewards yet."
        await message.answer(
            f"*üë§ Your Profile*\n\n"
            f"*üë• Referrals:* {referrals_count}\n"
            f"*üí∏ Discount:* {discount:.2f}%\n"
            f"*üí∞ Coins:* {coins} üèÖ\n"
             f"*üèÜ Level:* {level} üíé\n\n"
            f"*üéÅ Presents bought:* {rewards_list}\n",
            parse_mode="Markdown"
        )
    else:
        await message.answer("You are not registered in the system yet.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéÅ Gift Shop"
@dp.message(F.text == "üéÅ Gift Shop")
async def handle_gift_shop(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
    level = cursor.fetchone()[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÆ Discord Nitro (1 Month)"), KeyboardButton(text="üéÆ Discord Nitro (3 Months)")],
            [KeyboardButton(text="üéµ Spotify Premium (1 Month)"), KeyboardButton(text="üéµ Spotify Premium (3 Months)")],
            [KeyboardButton(text="üéµ Spotify Premium (6 Months)"), KeyboardButton(text="üéµ Spotify Premium (12 Months)")],
            [KeyboardButton(text="üü£ Twitch Level 1 (1 Month)"), KeyboardButton(text="üü£ Twitch Level 1 (3 Months)")],
            [KeyboardButton(text="üü£ Twitch Level 1 (6 Months)"), KeyboardButton(text="üü£ Twitch Level 2 (1 Month)")],
            [KeyboardButton(text="üü£ Twitch Level 3 (1 Month)"), KeyboardButton(text="üí∏ Buy 50% Discount (300 coins üèÖ)")],
            [KeyboardButton(text="üí∏ Buy 10% Discount (50 coins üèÖ)"), KeyboardButton(text="üí∏ Buy 25% Discount (120 coins üèÖ)")],
                                            [KeyboardButton(text="‚¨ÖÔ∏è Back to Menu")]
        ],
        resize_keyboard=True,
    )

    await message.answer(
        "üéÅ *Gift Shop*\n\n"
        "Here are the available gifts and discounts you can purchase with your coins.\n\n"
        "üéÆ *Discord Nitro*\n"
        "‚ñ´Ô∏è *1 Month ‚Äî 400 coins üèÖ*\n"
        "‚ñ´Ô∏è* 3 Months ‚Äî 800 coins üèÖ*\n\n"
        "üéµ *Spotify Premium*\n"
        "‚ñ´Ô∏è *1 Month ‚Äî 200 coins üèÖ*\n"
        "‚ñ´Ô∏è *3 Months ‚Äî 450 coins üèÖ*\n"
        "‚ñ´Ô∏è *6 Months ‚Äî 600 coins üèÖ*\n"
        "‚ñ´Ô∏è *12 Months ‚Äî 1220 coins üèÖ*\n\n"
        "üü£ *Twitch Subscriptions*\n"
        "‚ñ´Ô∏è *Level 1 (1 Month) ‚Äî 200 coins üèÖ*\n"
        "‚ñ´Ô∏è *Level 1 (3 Months) ‚Äî 400 coins* üèÖ\n"
        "‚ñ´Ô∏è *Level 1 (6 Months) ‚Äî 800 coins *üèÖ\n"
        "‚ñ´Ô∏è *Level 2 (1 Month) ‚Äî 300 coins* üèÖ\n"
        "‚ñ´Ô∏è *Level 3 (1 Month) ‚Äî 800 coins *üèÖ\n\n"
        "üí∏ *Discounts:*\n"
        "‚ñ´Ô∏è* 10% ‚Äî 50 coins *üèÖ\n"
        "‚ñ´Ô∏è *25% ‚Äî 120 coins* üèÖ\n"
        "‚ñ´Ô∏è *50% ‚Äî 300 coins *üèÖ\n\n",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
@dp.message(F.text.in_({
    "üéÆ Discord Nitro (1 Month)",
    "üéÆ Discord Nitro (3 Months)",
    "üéµ Spotify Premium (1 Month)",
    "üéµ Spotify Premium (3 Months)",
    "üéµ Spotify Premium (6 Months)",
    "üéµ Spotify Premium (12 Months)",
    "üü£ Twitch Level 1 (1 Month)",
    "üü£ Twitch Level 1 (3 Months)",
    "üü£ Twitch Level 1 (6 Months)",
    "üü£ Twitch Level 2 (1 Month)",
    "üü£ Twitch Level 3 (1 Month)"
}))
async def handle_gift_purchase(message: Message):
    user_id = message.from_user.id
    gift_mapping = {
        "üéÆ Discord Nitro (1 Month)": ("Discord Nitro (1 Month)", 400),
        "üéÆ Discord Nitro (3 Months)": ("Discord Nitro (3 Months)", 800),
        "üéµ Spotify Premium (1 Month)": ("Spotify Premium (1 Month)", 200),
        "üéµ Spotify Premium (3 Months)": ("Spotify Premium (3 Months)", 450),
        "üéµ Spotify Premium (6 Months)": ("Spotify Premium (6 Months)", 600),
        "üéµ Spotify Premium (12 Months)": ("Spotify Premium (12 Months)", 1220),
        "üü£ Twitch Level 1 (1 Month)": ("Twitch Level 1 (1 Month)", 200),
        "üü£ Twitch Level 1 (3 Months)": ("Twitch Level 1 (3 Months)", 400),
        "üü£ Twitch Level 1 (6 Months)": ("Twitch Level 1 (6 Months)", 800),
        "üü£ Twitch Level 2 (1 Month)": ("Twitch Level 2 (1 Month)", 300),
        "üü£ Twitch Level 3 (1 Month)": ("Twitch Level 3 (1 Month)", 800),
    }
    gift_name, gift_cost = gift_mapping[message.text]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT level FROM users WHERE user_id = ?", (user_id,))
    level = cursor.fetchone()[0]

    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
    if level < 2:
        await message.answer(
            f"‚ùå *This gift is only available for Level 2 users.*\n"
            f"Earn Level 2 by making a purchase or if your referral makes a purchase.\n\n"
            f"*Your current balance:* {get_user_coins(user_id)} üèÖ coins\n"
            f"*Cost:* {gift_cost} üèÖ coins",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    coins = get_user_coins(user_id)
    if coins < gift_cost:
        await message.answer(
            f"‚ùå *You don't have enough coins to buy {gift_name}.*\n"
            f"*Your current balance:* {coins} üèÖ coins\n"
            f"*Cost:* {gift_cost} üèÖ coins",
            parse_mode="Markdown"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
    cursor.execute("UPDATE users SET coins = coins - ? WHERE user_id = ?", (gift_cost, user_id))
    conn.commit()
    add_reward(user_id, gift_name)

    await message.answer(
        f"üéâ *Congratulations!*\n"
        f"*You successfully purchased {gift_name}.*\n"
        f"*Your current balance:* {coins - gift_cost} üèÖ coins",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–¥–æ–∫
@dp.message(F.text.in_({
    "üí∏ Buy 10% Discount (50 coins üèÖ)",
    "üí∏ Buy 25% Discount (120 coins üèÖ)",
    "üí∏ Buy 50% Discount (300 coins üèÖ)",
    "üí∏ Buy 75% Discount (600 coins üèÖ)",
    "üí∏ Buy 100% Discount (1000 coins üèÖ)"
}))
async def handle_buy_discount(message: Message):
    user_id = message.from_user.id
    discount_mapping = {
        "üí∏ Buy 10% Discount (50 coins üèÖ)": (10, 50),
        "üí∏ Buy 25% Discount (120 coins üèÖ)": (25, 120),
        "üí∏ Buy 50% Discount (300 coins üèÖ)": (50, 300),
        "üí∏ Buy 75% Discount (600 coins üèÖ)": (75, 600),
        "üí∏ Buy 100% Discount (1000 coins üèÖ)": (100, 1000),
    }
    discount_percent, discount_cost = discount_mapping[message.text]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT level, coins, discount FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    level, coins, current_discount = user_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å–∫–∏–¥–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if discount_percent > 50 and level < 2:
        await message.answer(
            "‚ùå *This discount is only available for Level 2 users.*\n"
            "Earn Level 2 by making a purchase or if your referral makes a purchase.",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if coins < discount_cost:
        await message.answer(
            f"‚ùå *You don't have enough coins to buy a {discount_percent}% discount.*\n"
            f"*Your current balance:* {coins} üèÖ coins\n"
            f"*Cost:* {discount_cost} üèÖ coins",
            parse_mode="Markdown"
        )
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    new_discount = current_discount + discount_percent
    cursor.execute("UPDATE users SET coins = coins - ?, discount = ? WHERE user_id = ?", (discount_cost, new_discount, user_id))
    conn.commit()

    await message.answer(
        f"üéâ *Congratulations!*\n"
        f"*You successfully purchased a {discount_percent}% discount.*\n"
        f"*Your current balance:* {coins - discount_cost} üèÖ coins\n"
        f"*Your total discount:* {new_discount}%",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è Back to Menu"
@dp.message(F.text == "‚¨ÖÔ∏è Back to Menu")
async def handle_back_to_menu(message: Message):
    await message.answer("‚¨ÖÔ∏è Back to the main menu.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Assortiment"
@dp.message(F.text == "üõí Catalog")
async def handle_assortiment(message: Message):                              
    await message.answer(
        "Choose a category:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üéß Spotify Premium"), KeyboardButton(text="üî¥ YouTube Premium")],
                [KeyboardButton(text="üü£ Twitch Subscription"), KeyboardButton(text="üíé Discord Nitro")],
                [KeyboardButton(text="‚≠ê Telegram Stars"), KeyboardButton(text="Turkish Bankcards üáπüá∑")],
                                            [KeyboardButton(text="Back")]
            ],
            resize_keyboard=True
        )
    )

# Levels
@dp.message(F.text == "‚ùì About Levels")
async def handle_about_levels(message: Message):
    await message.answer(
        "*üìà About Levels*\n\n"
        "üîπ *Level 1:*\n"
        "‚Ä¢ Access to basic features.\n"
        "‚Ä¢ Earn 25 coins per referral.\n\n"
        "üîπ *Level 2:*\n"
        "‚Ä¢ Access to premium gifts in the Gift Shop.\n"
        "‚Ä¢ Earn 30 coins per referral.\n"
        "‚Ä¢ Unlock exclusive discounts.\n\n"
        "üîπ *How to level up:*\n"
        "‚Ä¢ Make a purchase or invite a friend who makes a purchase.\n\n"
        "Start leveling up today and enjoy more benefits! üöÄ",
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Spotify, YouTube Premium –∏ Twitch Prime
@dp.message(F.text == "üéß Spotify Premium")
async def handle_spotify(message: Message):
    await message.answer(
        "üéµ *Spotify Premium Individual*\n\n"
        "‚ñ´Ô∏è* 1 month ‚Äî $3.99*\n\n"
        "‚ñ´Ô∏è* 3 months ‚Äî $8.99*\n\n"
        "‚ñ´Ô∏è *6 months ‚Äî $12.99*\n\n"
        "*‚ñ´Ô∏è 12 months ‚Äî $22.99* \n\n"
        "*Payment methods:\nü™ôCrypto\nüí∏PayPal*\n\n"
        "*To buy: @headphony*",
    parse_mode="Markdown")

@dp.message(F.text == "üî¥ YouTube Premium")
async def handle_youtube(message: Message):
    await message.answer(
        "soon..."
    )

@dp.message(F.text == "üü£ Twitch Subscription")
async def handle_twitch(message: Message):
    await message.answer(
        "*üéÆ Twitch Subscription*\n"
        "*LEVEL 1‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 1 ‚Äî 1 Month ‚Äî $3.99*\n\n"
        "*‚ñ´Ô∏è Level 1 ‚Äî 3 Months ‚Äî $8.99*\n\n"
        "*‚ñ´Ô∏è Level 1 ‚Äî 6 Months ‚Äî $17.99*\n\n"
        "*LEVEL 2‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 2 ‚Äî 1 Month ‚Äî $5.99*\n\n"
        "*LEVEL 3‚úÖ\n\n*"
        "*‚ñ´Ô∏è Level 3 ‚Äî 1 Month ‚Äî $14.99*\n\n"
        "ü•∞No account access needed ‚Äî just *your* and the *streamer‚Äôs* *nicknames!*\n\n"
        "*Payment methods:\n- Crypto\n- PayPal*\n\n"
        "*To buy: @heaphony*",
        
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Turkish Bankcards üáπüá∑"
@dp.message(F.text == "Turkish Bankcards üáπüá∑")
async def handle_turkish_bankcards(message: Message):
    await message.answer(
        "Choose a card type:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="Fups üáπüá∑"), KeyboardButton(text="Ozan üáπüá∑")],
                [KeyboardButton(text="Paycell üáπüá∑"), KeyboardButton(text="Other Stuff üáπüá∑")],
                [KeyboardButton(text="üìñ Must Read"), KeyboardButton(text="Back")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "Fups üáπüá∑")
async def handle_fups(message: Message):
    photo_url = "https://imgur.com/a/Ns79AjX"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=(
            "<b>FUPS</b> is a digital banking platform offering personal <b>IBANs</b>, <b>Visa cards</b>, and "
            "<b>instant money transfers</b> ‚≠ê\n\n"
            "Enjoy <b>high daily limits</b>, easy bill payments, and fast top-ups ‚Äî all with a user-friendly app that "
            "fits your lifestyle! üòé\n\n"
            "<b>Learn more about FUPS:</b> <a href='https://fups.com'>Visit FUPS</a>\n\n\n"
            "<b>It's yours just for 19.99$! üí∏</b>\n\n"
            "<b>Payment methods:</b>\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal\n\n"
            "To buy: @headphony"
        ),
        parse_mode="HTML"
    )

@dp.message(F.text == "Ozan üáπüá∑")
async def handle_ozan(message: Message):
    photo_url = "https://imgur.com/a/hGYZ9Ny"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=(
            "<b>Your money, your rules.</b>\n\n"
            "<a href='https://ozan.com'>Ozan</a> gives you <b>instant accounts</b>, <b>powerful cards</b>, and <b>fast</b>, "
            "<b>borderless</b> transfers ‚Äî all with real, <b>transparent limits</b>.\n\n"
            "Spend, send, and control your finances without delays or surprises üåê\n\n"
            "<b>Price is only 19.99$ üí∏</b>\n\n"
            "Freedom has never felt this easy üòè\n\n"
            "<b>Payment methods:</b>\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal\n\n"
            "To buy: @headphony"
        ),
        parse_mode="HTML"
    )

@dp.message(F.text == "Paycell üáπüá∑")
async def handle_paycell(message: Message):
    photo_url = "https://imgur.com/a/LDGGDkG"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_url,
        caption=(
            "<b>Paycell</b>, powered by <a href='https://www.turkcell.com.tr'>Turkcell</a>, lets you pay <b>bills</b>, "
            "<b>shop online</b>, and <b>send money</b> with just your phone number ‚≠ê\n\n"
            "<b>Supports both local and international payments, with flexible spending limits and fast processing!</b> üöÄ\n\n\n"
            "<b>Priced at just 34.99$! üí∏</b>\n\n"
            "<b>Payment methods:</b>\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal\n\n"
            "To buy: @headphony\n\n"
            "‚ö†Ô∏èCURRENTLY UNAVAILABLE‚ö†Ô∏è"
        ),
        parse_mode="HTML"
    )

@dp.message(F.text == "Other Stuff üáπüá∑")
async def handle_back(message: Message):
    await message.answer(
        "*üáπüá∑Premium methods to top up a Turkish card - 1.99$*\n\n"
        "*üáπüá∑Turkish passport details - 5$*\n\n"
        "*Payment methods:\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal\n\n*"
        "*To buy: @headphony*",
            parse_mode="Markdown")

@dp.message(F.text == "üíé Discord Nitro")
async def handle_discord(message: Message):
    await message.answer(
        "üíé *Discord Nitro Full*\n\n"
        "*1 month ‚Äî $6.49*\n\n"
        "*3 months ‚Äî $13.99*\n\n"
        "*6 months ‚Äî soon...*\n\n"
        "*üéÅ You'll get Nitro as a gift ‚Äî no need to log in anywhere, no data required!*\n\n"
        "*‚öúÔ∏è You'll only have to activate it with VPN and that's it!*\n\n"
        "*Payment methods:\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal*\n\n"
        "*To buy @headphony*",
        parse_mode="Markdown"
    )

@dp.message(F.text == "‚≠ê Telegram Stars")
async def handle_telegram_stars(message: Message):
    await message.answer(
        "*‚≠ê Telegram Stars*\n\n"
        "*100‚≠ê ‚Äî $1.79*\n\n"
        "*250‚≠ê ‚Äî $4.59*\n\n"
        "*500‚≠ê ‚Äî $8.99*\n\n"
        "*1000‚≠ê ‚Äî $16.99*\n\n"
        "*üì¶ All stars are purchased officially and delivered via Telegram!*\n\n"
        "‚úÖ No account info, no logins ‚Äî just your *@username* to receive the gift.\n\n"
        "*Payment methods:\n- Crypto (TON, BTC, USDC, BNB)\n- PayPal*\n\n"
        "*To buy @headphony*",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "Back")
async def handle_back(message: Message):
    await message.answer("You are back to the main menu.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Info about us"
@dp.message(F.text == "‚ÑπÔ∏è About Us")
async def handle_about(message: Message):
    await message.answer(
        "*Horda Shop. We don‚Äôt beg ‚Äî we deliver.*\n\n"
        "*Fast deals, clean setup, zero bullshit.*\n\n"
        "You came for the *price* ‚Äî you‚Äôll stay for the service üëä\n\n"
        "*Cheap? Yeah ü§©*\n"
        "*Shady? Nah üòé*\n\n"
        "*We move different...*",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Referral System"
@dp.message(F.text == "üéÅ Referral System")
async def handle_referral(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/hordashop_bot?start={user_id}"
    await message.answer(
        f"*üéâ Referral System*\n\n"
        f"*Invite* your *friends* and earn *rewards!*\n"
        f"For every user who joins with your link, you‚Äôll receive:\n\n"
        f"‚Ä¢ *üîÅ 25 coins automatically just for each referral*\n\n"
        f"‚Ä¢ *üí∏ + 20% üèÖ of a purchase that your referral makes*\n\n"
        f"*Automatic Levelup if your referral makes a purchase üîù*\n\n"
        f"*Your referral link: {referral_link}*",
    parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Help"
@dp.message(F.text == "üí¨ Help & Support")
async def handle_help(message: Message):
    await message.answer(
        "*Got any questions?*\n\n"
        "Feel free to reach out to us anytime:\n"
        "*üì© @headphony*",
       parse_mode="Markdown" 
       )

@dp.message(F.text == "üìñ Must Read")
async def handle_to_read(message: Message):
    await message.answer(
        "*Important! üö®*\n\n"
"Please note that in rare cases, there may be a delay in the issuance of Turkish cards. We make every effort to ensure quick delivery, but depending on the volume of orders and external factors, the process may take slightly longer than usual.\n\n\n"
"*What might affect the processing time ‚ùì*\n\n\n"
"*‚Ä¢ Technical issues on the supplier's side ‚öôÔ∏è*\n\n"
"*‚Ä¢ Temporary limitations on card availability üö´*\n\n"
"*‚Ä¢ Security and verification procedures üõ°Ô∏è*\n\n\n"
"*We will keep you updated on the status of your order at each stage. In case of a delay, we guarantee that your card will be issued as soon as possible üòä*",
   parse_mode="Markdown"
   )

# –ö–æ–º–∞–Ω–¥–∞: /give_coins
@dp.message(Command(commands=["give_coins"]))
async def handle_give_coins(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/give_coins @username <amount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")
        coins_to_add = int(args[2])

        cursor.execute("SELECT user_id, coins FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, current_coins = user
        new_coins = current_coins + coins_to_add

        cursor.execute("UPDATE users SET coins = ? WHERE user_id = ?", (new_coins, user_id))
        conn.commit()

        await bot.send_message(
            user_id,
            f"üéâ *You have received {coins_to_add} üèÖ coins!*\n"
            f"*Your current balance: {new_coins} üèÖ coins.*",
            parse_mode="Markdown"
        )

        await message.answer(
            f"User with username `@{username}` has been credited with {coins_to_add} üèÖ coins.\n"
            f"New balance: {new_coins} üèÖ coins.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and coin amount.")

# –ö–æ–º–∞–Ω–¥–∞: /remove_coins
@dp.message(Command(commands=["remove_coins"]))
async def handle_remove_coins(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/remove_coins @username <amount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")
        coins_to_remove = int(args[2])

        cursor.execute("SELECT user_id, coins FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, current_coins = user
        new_coins = max(current_coins - coins_to_remove, 0)

        cursor.execute("UPDATE users SET coins = ? WHERE user_id = ?", (new_coins, user_id))
        conn.commit()

        await bot.send_message(
            user_id,
            f"‚ùå *{coins_to_remove} üèÖ coins have been removed from your balance.*\n"
            f"*Your current balance: {new_coins} üèÖ coins.*",
            parse_mode="Markdown"
        )

        await message.answer(
            f"User with username `@{username}` has had {coins_to_remove} üèÖ coins removed.\n"
            f"New balance: {new_coins} üèÖ coins.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and coin amount.")

# –ö–æ–º–∞–Ω–¥–∞: /register_purchase
@dp.message(Command(commands=["register_purchase"]))
async def handle_register_purchase(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/register_purchase @username <product_code>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")
        product_code = args[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
        if product_code not in PRODUCTS:
            await message.answer(f"Invalid product code: `{product_code}`", parse_mode="Markdown")
            return

        product = PRODUCTS[product_code]
        product_name = product["name"]
        product_price = product["price"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT user_id, referrer_id FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, referrer_id = user

        # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if referrer_id:
            coins_to_add = int(product_price * 0.2)
            add_coins(referrer_id, coins_to_add)

            await bot.send_message(
                referrer_id,
                f"üéâ *The user you invited made a purchase!*\n"
                f"*You earned {coins_to_add} üèÖ coins!*\n",
                parse_mode="Markdown"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_level(user_id)

        await message.answer(
            f"Purchase of `{product_name}` by user `@{username}` has been successfully registered.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and product code.")

# –ö–æ–º–∞–Ω–¥–∞: /register_purchase_general
@dp.message(Command(commands=["register_purchase_general"]))
async def handle_register_purchase_general(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("Usage: `/register_purchase_general @username <amount>`", parse_mode="Markdown")
        return

    try:
        username = args[1].lstrip("@")
        purchase_amount = int(args[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT user_id, referrer_id FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
        if not user:
            await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
            return

        user_id, referrer_id = user

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É purchases
        cursor.execute("INSERT INTO purchases (user_id, referrer_id, amount) VALUES (?, ?, ?)", (user_id, referrer_id, purchase_amount))
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_level(user_id)

        await message.answer(
            f"Purchase of `{purchase_amount}` coins by user `@{username}` has been successfully registered.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("Invalid input. Please provide a valid username and purchase amount.")

# –ö–æ–º–∞–Ω–¥–∞: /delete_user
@dp.message(Command(commands=["delete_user"]))
async def handle_delete_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("Usage: `/delete_user <user_id>`", parse_mode="Markdown")
        return

    try:
        user_id = int(args[1])

        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            await message.answer(f"User with ID `{user_id}` not found.", parse_mode="Markdown")
            return

        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        conn.commit()

        await message.answer(f"User with ID `{user_id}` has been successfully deleted.", parse_mode="Markdown")

    except ValueError:
        await message.answer("Invalid input. Please provide a valid user ID.")

# –ö–æ–º–∞–Ω–¥–∞: /userstat
@dp.message(Command(commands=["userstat"]))
async def handle_userstat(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ You don't have permission to use this command.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("Usage: `/userstat @username`", parse_mode="Markdown")
        return

    username = args[1].lstrip("@")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT user_id, referrals_count, coins, rewards FROM users WHERE username = ?", (username,))
    user = cursor.fetchone()
    if not user:
        await message.answer(f"User with username `@{username}` not found.", parse_mode="Markdown")
        return

    user_id, referrals_count, coins, rewards = user
    rewards_list = rewards if rewards else "No rewards yet."

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    cursor.execute("SELECT username FROM users WHERE referrer_id = ?", (user_id,))
    referrals = cursor.fetchall()
    referrals_list = "\n".join([f"‚Ä¢ @{referral[0]}" for referral in referrals]) if referrals else "No referrals yet."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await message.answer(
        f"*User Statistics:*\n\n"
        f"*User ID:* `{user_id}`\n"
        f"*Username:* `@{username}`\n"
        f"*Referrals:* `{referrals_count}`\n"
        f"*Coins:* `{coins} üèÖ`\n"
        f"*Rewards:* `{rewards_list}`\n\n"
        f"*Referrals List:*\n{referrals_list}",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞: /list_users
@dp.message(Command(commands=["list_users"]))
async def handle_list_users(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ get_chat
    for user_id in user_ids:
        try:
            chat = await bot.get_chat(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_user_in_db(
                user_id=chat.id,
                username=chat.username,
                first_name=chat.first_name
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT user_id, username, first_name FROM users")
    users = cursor.fetchall()

    if not users:
        return await message.answer("üì≠ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = "üìÇ <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user_id, username, first_name in users:
        response += (
            f"‚ñ´Ô∏è <b>{first_name if first_name else '‚Äî'}</b>\n"
            f"‚îú @{username if username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}\n"
            f"‚îî ID: <code>{user_id}</code>\n"
            f"üîó <a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>\n\n"
        )

    await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def handle_errors(update: Update, exception: Exception):
    logging.error(f"An error occurred: {exception}\nUpdate: {update}")
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f"An error occurred:\n\n{exception}",
        parse_mode="Markdown"
    )
    return True  # Return True to prevent the error from stopping the bot

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unhandled_messages(message: Message):
    await message.answer("There is no such command. Try again!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

logging.basicConfig(level=logging.DEBUG)

if __name__ == '__main__':
    asyncio.run(main())
